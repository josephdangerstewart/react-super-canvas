{"version":3,"sources":["webpack:///../docs-src/components/extending-the-toolbar.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","interfaceMetadata","ToolbarProps","BrushControlsProps","StyleControlsProps","isMDXComponent"],"mappings":"whBAUO,IAAMA,EAAe,Q,+NAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,iBAAQ,CACN,GAAM,yBADR,yBAGA,0HAAyG,mBAAGC,WAAW,KAAQ,CAC3H,KAAQ,kCAD6F,gBAAzG,wMAGA,iBAAQ,CACN,GAAM,WADR,WAGA,iBAAQ,CACN,GAAM,0BACL,0BAAYA,WAAW,MAAvB,2BACH,YAAC,IAAD,CAAwBC,kBAAmBC,EAAcH,QAAQ,2BACjE,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,gCACL,0BAAYC,WAAW,MAAvB,iCACH,YAAC,IAAD,CAAwBC,kBAAmBE,EAAoBJ,QAAQ,2BACvE,iBAAQ,CACN,GAAM,iBADR,iBAGA,iBAAQ,CACN,GAAM,gCACL,0BAAYC,WAAW,MAAvB,iCACH,YAAC,IAAD,CAAwBC,kBAAmBG,EAAoBL,QAAQ,4B,sNAK3EH,EAAWS,gBAAiB","file":"component---docs-src-components-extending-the-toolbar-mdx-669ce4a5aa9e0692f325.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/ASUS/Code/react-super-canvas/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport ToolbarProps from '../../meta/interfaces/ToolbarProps.json';\nimport BrushControlsProps from '../../meta/interfaces/BrushControlsProps.json';\nimport StyleControlsProps from '../../meta/interfaces/StyleControlsProps.json';\nimport { InterfaceDocumentation } from '../InterfaceDocumentation';\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <h1 {...{\n      \"id\": \"extending-the-toolbar\"\n    }}>{`Extending The Toolbar`}</h1>\n    <p>{`The toolbar in the component was designed using a replaceable component pattern, similarly to how `}<a parentName=\"p\" {...{\n        \"href\": \"https://react-select.com/home\"\n      }}>{`react-select`}</a>{` works. It is made up atomic components that can be individually replaced to your use case. This allows you to add custom functionality to the toolbar without having to completely re-implement it.`}</p>\n    <h2 {...{\n      \"id\": \"toolbar\"\n    }}>{`Toolbar`}</h2>\n    <h3 {...{\n      \"id\": \"interface-toolbarprops\"\n    }}><inlineCode parentName=\"h3\">{`interface ToolbarProps`}</inlineCode></h3>\n    <InterfaceDocumentation interfaceMetadata={ToolbarProps} mdxType=\"InterfaceDocumentation\" />\n    <h2 {...{\n      \"id\": \"brushcontrols\"\n    }}>{`BrushControls`}</h2>\n    <h3 {...{\n      \"id\": \"interface-brushcontrolsprops\"\n    }}><inlineCode parentName=\"h3\">{`interface BrushControlsProps`}</inlineCode></h3>\n    <InterfaceDocumentation interfaceMetadata={BrushControlsProps} mdxType=\"InterfaceDocumentation\" />\n    <h2 {...{\n      \"id\": \"stylecontrols\"\n    }}>{`StyleControls`}</h2>\n    <h3 {...{\n      \"id\": \"interface-stylecontrolsprops\"\n    }}><inlineCode parentName=\"h3\">{`interface StyleControlsProps`}</inlineCode></h3>\n    <InterfaceDocumentation interfaceMetadata={StyleControlsProps} mdxType=\"InterfaceDocumentation\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}