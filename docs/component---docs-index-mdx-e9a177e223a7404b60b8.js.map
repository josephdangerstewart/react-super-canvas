{"version":3,"sources":["webpack:///../docs/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","isMDXComponent"],"mappings":"weAMO,IAAMA,EAAe,Q,gMAE5B,IAKMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,KAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,iBAAQ,CACN,GAAM,oCADR,oCAGA,iCACA,oSAAmR,mBAAGC,WAAW,KAAQ,CACrS,KAAQ,oCADuQ,kBAAnR,8GAE0I,mBAAGA,WAAW,KAAQ,CAC5J,KAAQ,wBAD8H,uBAF1I,uBAKA,iBAAQ,CACN,GAAM,iBADR,iBAGA,sBACE,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,gCAApB,yJACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,qBAApB,6KAAwP,kBAAIA,WAAW,MAAf,gBAAxP,YACA,kBAAIA,WAAW,MAAK,sBAAQA,WAAW,MAAnB,mBAApB,oKAEF,iBAAQ,CACN,GAAM,YADR,YAGA,wHACA,iBAAQ,CACN,GAAM,eADR,eAGA,wIAAuH,mBAAGA,WAAW,KAAQ,CACzI,KAAQ,kBAD2G,gBAAvH,uNAEiP,mBAAGA,WAAW,KAAQ,CACnQ,KAAQ,+BADqO,6BAFjP,4CAKA,sBACE,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,WACA,kBAAIA,WAAW,MAAf,2BAEF,iBAAQ,CACN,GAAM,gBADR,gBAGA,kFAAiE,mBAAGA,WAAW,KAAQ,CACnF,KAAQ,iBADqD,eAAjE,gzBAGA,iBAAQ,CACN,GAAM,WADR,WAGA,kaAAiZ,0BAAYA,WAAW,KAAvB,UAAjZ,eACA,iBAAQ,CACN,GAAM,6BADR,6BAGA,+rB,uLAKJJ,EAAWK,gBAAiB","file":"component---docs-index-mdx-e9a177e223a7404b60b8.js","sourcesContent":["import React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"C:/Users/ASUS/Code/react-super-canvas/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1 {...{\n      \"id\": \"react-super-canvas-documentation\"\n    }}>{`React Super Canvas Documentation`}</h1>\n    <p>{`Welcome!`}</p>\n    <p>{`React super canvas is an API for creating power, declarative, canvas based visual graphics editors. This is useful for creating diagrams editors, map makers, graph editors and so forth. This project was originally made to power the map making tool in my other project `}<a parentName=\"p\" {...{\n        \"href\": \"http://app.dndcampaignbuddy.com\"\n      }}>{`Campaign Buddy`}</a>{`. I decided to open source this as I saw more potential than just creating dungeon maps. This project uses `}<a parentName=\"p\" {...{\n        \"href\": \"https://semver.org/\"\n      }}>{`semantic versioning`}</a>{` to track versions.`}</p>\n    <h2 {...{\n      \"id\": \"project-goals\"\n    }}>{`Project goals`}</h2>\n    <ol>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Simplicity of implementation`}</strong>{` - It should be easy to use right out of the box with little configuration. It should not be much more complicated than using a text input component.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Simplicity of use`}</strong>{` - End users should be able to use the SuperCanvas to create graphical canvas based creations (maps, graphs, diagrams, etc) without needing to read any documentation. It `}<em parentName=\"li\">{`feel natural`}</em>{` to use.`}</li>\n      <li parentName=\"ol\"><strong parentName=\"li\">{`Customizability`}</strong>{` - Developers should be able to extend the editor to create a graphical canvas based editor that suits any need (map creation, photo editing, diagraming, etc).`}</li>\n    </ol>\n    <h2 {...{\n      \"id\": \"concepts\"\n    }}>{`Concepts`}</h2>\n    <p>{`The following important concepts will form the foundation of the SuperCanvas component and API.`}</p>\n    <h3 {...{\n      \"id\": \"supercanvas\"\n    }}>{`SuperCanvas`}</h3>\n    <p>{`The SuperCanvas is the editing environment built on top of the HTML5 canvas. Essentially, it is a collection of `}<a parentName=\"p\" {...{\n        \"href\": \"#canvas-items\"\n      }}>{`canvas items`}</a>{` in a virtual space with tools to manipulate and add to that collection. The SuperCanvas handles all interactions with the virtual environment itself except for mouse position snapping (which is delegated to the `}<a parentName=\"p\" {...{\n        \"href\": \"#canvas-background-element\"\n      }}>{`canvas background element`}</a>{`). This includes (but is not limited to)`}</p>\n    <ol>\n      <li parentName=\"ol\">{`Panning`}</li>\n      <li parentName=\"ol\">{`Zooming`}</li>\n      <li parentName=\"ol\">{`Hotkeys`}</li>\n      <li parentName=\"ol\">{`Selecting canvas items`}</li>\n    </ol>\n    <h3 {...{\n      \"id\": \"canvas-items\"\n    }}>{`Canvas Items`}</h3>\n    <p>{`Canvas items are the visual objects that are drawn on the `}<a parentName=\"p\" {...{\n        \"href\": \"#supercanvas\"\n      }}>{`SuperCanvas`}</a>{`. The objects in the collection can be anything, simple geometric shapes, images, text, anything that can be displayed visually. They can be more abstract (e.g. a location pin) or more low level (i.e. a circle). They exist on the SuperCanvas in layers. Canvas items always exist on top of each other. By default they are sorted in the order that they are added to the canvas. If I draw a circle, a square, and a triangle, the circle will be at the bottom then the square and then the triangle. The SuperCanvas stores the instances of the canvas items that are in the editor, but each canvas item maintains it's own state internally. It also implements it's own methods for rendering based on it's editor state (selected or unselected) as well as other methods required for interacting with the item in the space.`}</p>\n    <h3 {...{\n      \"id\": \"brushes\"\n    }}>{`Brushes`}</h3>\n    <p>{`Brushes are used to \"paint\" canvas items to the SuperCanvas. They can be configured through the SuperCanvas UI but define their own parameters and, like canvas items, maintain their own state. They also implement methods for rendering previews of the canvas item based on certain events. This project defines a few default brushes but you are free to implement your own brushes that extend the `}<inlineCode parentName=\"p\">{`IBrush`}</inlineCode>{` interface.`}</p>\n    <h3 {...{\n      \"id\": \"canvas-background-element\"\n    }}>{`Canvas Background Element`}</h3>\n    <p>{`The canvas background element enforces snap rules and renders background content (e.g. grid lines). This means that the canvas will use the current background element to map the virtual position of the cursor (i.e. transformed to account for panning and zooming) to it's snapped position. This mapped cursor position is then passed to the active brush as the users mouse position. This logic is abstracted to it's own component (and not managed by the SuperCanvas) for customizability. If a user wanted to create a timeline for example, where the cursor position is snapped across a horizontal line then they could without worrying about the implementation of the super canvas.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}